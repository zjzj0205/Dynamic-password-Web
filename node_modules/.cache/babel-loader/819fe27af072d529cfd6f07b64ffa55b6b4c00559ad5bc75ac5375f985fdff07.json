{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport axios from \"axios\";\nimport { Message } from 'element-ui';\nvar instance = axios.create({\n  // baseURL: \"http://127.0.0.1:8081\",\n  baseURL: \"http://110.40.169.124:6550\",\n  timeout: 10000\n});\n\n// 请求拦截器   \n// instance.interceptors.request.use(config => {\n//     let token = localStorage.getItem(\"token\");\n\n//     if(token){\n//         config.headers = config.headers || {};\n//         config.headers[\"token\"] = token;\n//     }\n//     return config\n// }, err => {\n//     return Promise.reject(err)\n// })\n\n//响应拦截器\ninstance.interceptors.response.use(function (response) {\n  // 统一管理错误提示\n  console.log('拦截器响应成功');\n  console.log(response.response);\n  var data = response.data;\n  if (data.code !== 200) {\n    Message({\n      message: data.msg || \"网络请求错误\",\n      type: 'error'\n    });\n  }\n  return data;\n}, function (err) {\n  return Promise.reject(err);\n});\n\n// axios.interceptors.response.use(\n// \tresponse => {\n// \t\tconsole.log('拦截器响应成功')\n// \t\treturn response\n// \t},\n// \terror => {\n// \t\tconsole.log('拦截器响应失败')\n// \t\tconsole.log(error)\n// \t\tif(error.request){\n// \t\t\tconsole.log(error.request)\n// \t\t} else if(error.response){\n// \t\t\tconsole.log(error.response.data);\n// \t\t\tconsole.log(error.response.status);\n// \t\t}\n// \t\tif (error && error.response) {\n// \t\t\tswitch (error.response.status) {\n// \t\t\t\tcase 400: error.message = '请求错误(400)'; \n// \t\t\t\t\tbreak;\n// \t\t\t\tcase 401: error.message = '未授权，请重新登录(401)';\n// \t\t\t\t\tbreak;\n// \t\t\t\tcase 403: error.message = '拒绝访问(403)';\n// \t\t\t\t\tbreak;\n// \t\t\t\tcase 404: error.message = '请求出错(404)'; \n// \t\t\t\t\tbreak;\n// \t\t\t\tcase 408: error.message = '请求超时(408)'; \n// \t\t\t\t\tbreak;\n// \t\t\t\tcase 500: error.message = '服务器错误(500)'; \n// \t\t\t\t\tbreak;\n// \t\t\t\tcase 501: error.message = '服务未实现(501)'; \n// \t\t\t\t\tbreak;\n// \t\t\t\tcase 502: error.message = '网络错误(502)'; \n// \t\t\t\t\tbreak;\n// \t\t\t\tcase 503: error.message = '服务不可用(503)'; \n// \t\t\t\t\tbreak;\n// \t\t\t\tcase 504: error.message = '网络超时(504)'; \n// \t\t\t\t\tbreak;\n// \t\t\t\tcase 505: error.message = 'HTTP版本不受支持(505)';\n// \t\t\t\t\tbreak;\n// \t\t\t\tdefault: error.message = '连接出错';\n// \t\t\t}\n// \t\t}else{\n// \t\t\terror.message ='连接服务器失败!'\n// \t\t}\n// \t\treturn Promise.reject(error)\n// \t}\n// )\n\nexport default instance;","map":{"version":3,"names":["axios","Message","instance","create","baseURL","timeout","interceptors","response","use","console","log","data","code","message","msg","type","err","Promise","reject"],"sources":["C:/Users/zhaojing/Desktop/dynamic_passward00/src/request/request.js"],"sourcesContent":["import axios from \"axios\"\r\nimport { Message } from 'element-ui'\r\n\r\nconst instance = axios.create({\r\n    // baseURL: \"http://127.0.0.1:8081\",\r\n    baseURL: \"http://110.40.169.124:6550\",\r\n    timeout: 10000\r\n})\r\n\r\n// 请求拦截器   \r\n// instance.interceptors.request.use(config => {\r\n//     let token = localStorage.getItem(\"token\");\r\n\r\n//     if(token){\r\n//         config.headers = config.headers || {};\r\n//         config.headers[\"token\"] = token;\r\n//     }\r\n//     return config\r\n// }, err => {\r\n//     return Promise.reject(err)\r\n// })\r\n\r\n//响应拦截器\r\ninstance.interceptors.response.use(response => {\r\n    // 统一管理错误提示\r\n\tconsole.log('拦截器响应成功')\r\n\tconsole.log(response.response)\r\n    let data = response.data  \r\n    if(data.code!==200){\r\n        Message({\r\n            message: data.msg || \"网络请求错误\",\r\n            type: 'error'\r\n        });\r\n        \r\n    }\r\n    return data  \r\n}, err => {\r\n    return Promise.reject(err)\r\n})\r\n\r\n\r\n// axios.interceptors.response.use(\n// \tresponse => {\n// \t\tconsole.log('拦截器响应成功')\n// \t\treturn response\n// \t},\n// \terror => {\n// \t\tconsole.log('拦截器响应失败')\n// \t\tconsole.log(error)\n// \t\tif(error.request){\n// \t\t\tconsole.log(error.request)\n// \t\t} else if(error.response){\n// \t\t\tconsole.log(error.response.data);\n// \t\t\tconsole.log(error.response.status);\n// \t\t}\n// \t\tif (error && error.response) {\n// \t\t\tswitch (error.response.status) {\n// \t\t\t\tcase 400: error.message = '请求错误(400)'; \n// \t\t\t\t\tbreak;\n// \t\t\t\tcase 401: error.message = '未授权，请重新登录(401)';\n// \t\t\t\t\tbreak;\n// \t\t\t\tcase 403: error.message = '拒绝访问(403)';\n// \t\t\t\t\tbreak;\n// \t\t\t\tcase 404: error.message = '请求出错(404)'; \n// \t\t\t\t\tbreak;\n// \t\t\t\tcase 408: error.message = '请求超时(408)'; \n// \t\t\t\t\tbreak;\n// \t\t\t\tcase 500: error.message = '服务器错误(500)'; \n// \t\t\t\t\tbreak;\n// \t\t\t\tcase 501: error.message = '服务未实现(501)'; \n// \t\t\t\t\tbreak;\n// \t\t\t\tcase 502: error.message = '网络错误(502)'; \n// \t\t\t\t\tbreak;\n// \t\t\t\tcase 503: error.message = '服务不可用(503)'; \n// \t\t\t\t\tbreak;\n// \t\t\t\tcase 504: error.message = '网络超时(504)'; \n// \t\t\t\t\tbreak;\n// \t\t\t\tcase 505: error.message = 'HTTP版本不受支持(505)';\n// \t\t\t\t\tbreak;\n// \t\t\t\tdefault: error.message = '连接出错';\n// \t\t\t}\n// \t\t}else{\n// \t\t\terror.message ='连接服务器失败!'\n// \t\t}\n// \t\treturn Promise.reject(error)\n// \t}\n// )\r\n\r\nexport default instance "],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,QAAQ,YAAY;AAEpC,IAAMC,QAAQ,GAAGF,KAAK,CAACG,MAAM,CAAC;EAC1B;EACAC,OAAO,EAAE,4BAA4B;EACrCC,OAAO,EAAE;AACb,CAAC,CAAC;;AAEF;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACAH,QAAQ,CAACI,YAAY,CAACC,QAAQ,CAACC,GAAG,CAAC,UAAAD,QAAQ,EAAI;EAC3C;EACHE,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;EACtBD,OAAO,CAACC,GAAG,CAACH,QAAQ,CAACA,QAAQ,CAAC;EAC3B,IAAII,IAAI,GAAGJ,QAAQ,CAACI,IAAI;EACxB,IAAGA,IAAI,CAACC,IAAI,KAAG,GAAG,EAAC;IACfX,OAAO,CAAC;MACJY,OAAO,EAAEF,IAAI,CAACG,GAAG,IAAI,QAAQ;MAC7BC,IAAI,EAAE;IACV,CAAC,CAAC;EAEN;EACA,OAAOJ,IAAI;AACf,CAAC,EAAE,UAAAK,GAAG,EAAI;EACN,OAAOC,OAAO,CAACC,MAAM,CAACF,GAAG,CAAC;AAC9B,CAAC,CAAC;;AAGF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAed,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}