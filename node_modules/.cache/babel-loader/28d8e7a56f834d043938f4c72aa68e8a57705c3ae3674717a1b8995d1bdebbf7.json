{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport axios from \"axios\";\nimport { Message } from 'element-ui';\nvar instance = axios.create({\n  // baseURL: \"http://127.0.0.1:8081\",\n  baseURL: \"http://110.40.169.124:6550\",\n  timeout: 10000\n});\n\n// 请求拦截器   \n// instance.interceptors.request.use(config => {\n//     let token = localStorage.getItem(\"token\");\n\n//     if(token){\n//         config.headers = config.headers || {};\n//         config.headers[\"token\"] = token;\n//     }\n//     return config\n// }, err => {\n//     return Promise.reject(err)\n// })\n\n//响应拦截器\n// instance.interceptors.response.use(response => {\n//     // 统一管理错误提示\n// \tconsole.log('拦截器响应成功')\n//     let data = response.data  \n//     if(data.code!==200){\n//         Message({\n//             message: data.msg || \"网络请求错误\",\n//             type: 'error'\n//         });\n\n//     }\n//     return data  \n// }, err => {\n//     return Promise.reject(err)\n// })\naxios.interceptors.response.use(function (response) {\n  console.log('拦截器响应成功');\n  return response;\n}, function (error) {\n  console.log('拦截器响应失败');\n  console.log(error);\n  if (error.request) {\n    console.log(error.request);\n  } else if (error.response) {\n    console.log(error.response.data);\n    console.log(error.response.status);\n  }\n  if (error && error.response) {\n    switch (error.response.status) {\n      case 400:\n        error.message = '请求错误(400)';\n        break;\n      case 401:\n        error.message = '未授权，请重新登录(401)';\n        break;\n      case 403:\n        error.message = '拒绝访问(403)';\n        break;\n      case 404:\n        error.message = '请求出错(404)';\n        break;\n      case 408:\n        error.message = '请求超时(408)';\n        break;\n      case 500:\n        error.message = '服务器错误(500)';\n        break;\n      case 501:\n        error.message = '服务未实现(501)';\n        break;\n      case 502:\n        error.message = '网络错误(502)';\n        break;\n      case 503:\n        error.message = '服务不可用(503)';\n        break;\n      case 504:\n        error.message = '网络超时(504)';\n        break;\n      case 505:\n        error.message = 'HTTP版本不受支持(505)';\n        break;\n      default:\n        error.message = '连接出错';\n    }\n  } else {\n    error.message = '连接服务器失败!';\n  }\n  return Promise.reject(error);\n});\nexport default instance;","map":{"version":3,"names":["axios","Message","instance","create","baseURL","timeout","interceptors","response","use","console","log","error","request","data","status","message","Promise","reject"],"sources":["C:/Users/zhaojing/Desktop/dynamic_passward00/src/request/request.js"],"sourcesContent":["import axios from \"axios\"\r\nimport { Message } from 'element-ui'\r\n\r\nconst instance = axios.create({\r\n    // baseURL: \"http://127.0.0.1:8081\",\r\n    baseURL: \"http://110.40.169.124:6550\",\r\n    timeout: 10000\r\n})\r\n\r\n// 请求拦截器   \r\n// instance.interceptors.request.use(config => {\r\n//     let token = localStorage.getItem(\"token\");\r\n\r\n//     if(token){\r\n//         config.headers = config.headers || {};\r\n//         config.headers[\"token\"] = token;\r\n//     }\r\n//     return config\r\n// }, err => {\r\n//     return Promise.reject(err)\r\n// })\r\n\r\n//响应拦截器\r\n// instance.interceptors.response.use(response => {\r\n//     // 统一管理错误提示\r\n// \tconsole.log('拦截器响应成功')\r\n//     let data = response.data  \r\n//     if(data.code!==200){\r\n//         Message({\r\n//             message: data.msg || \"网络请求错误\",\r\n//             type: 'error'\r\n//         });\r\n        \r\n//     }\r\n//     return data  \r\n// }, err => {\r\n//     return Promise.reject(err)\r\n// })\r\naxios.interceptors.response.use(\n\tresponse => {\n\t\tconsole.log('拦截器响应成功')\n\t\treturn response\n\t},\n\terror => {\n\t\tconsole.log('拦截器响应失败')\n\t\tconsole.log(error)\n\t\tif(error.request){\n\t\t\tconsole.log(error.request)\n\t\t} else if(error.response){\n\t\t\tconsole.log(error.response.data);\n\t\t\tconsole.log(error.response.status);\n\t\t}\n\t\tif (error && error.response) {\n\t\t\tswitch (error.response.status) {\n\t\t\t\tcase 400: error.message = '请求错误(400)'; \n\t\t\t\t\tbreak;\n\t\t\t\tcase 401: error.message = '未授权，请重新登录(401)';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 403: error.message = '拒绝访问(403)';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 404: error.message = '请求出错(404)'; \n\t\t\t\t\tbreak;\n\t\t\t\tcase 408: error.message = '请求超时(408)'; \n\t\t\t\t\tbreak;\n\t\t\t\tcase 500: error.message = '服务器错误(500)'; \n\t\t\t\t\tbreak;\n\t\t\t\tcase 501: error.message = '服务未实现(501)'; \n\t\t\t\t\tbreak;\n\t\t\t\tcase 502: error.message = '网络错误(502)'; \n\t\t\t\t\tbreak;\n\t\t\t\tcase 503: error.message = '服务不可用(503)'; \n\t\t\t\t\tbreak;\n\t\t\t\tcase 504: error.message = '网络超时(504)'; \n\t\t\t\t\tbreak;\n\t\t\t\tcase 505: error.message = 'HTTP版本不受支持(505)';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault: error.message = '连接出错';\n\t\t\t}\n\t\t}else{\n\t\t\terror.message ='连接服务器失败!'\n\t\t}\n\t\treturn Promise.reject(error)\n\t}\n)\r\n\r\nexport default instance "],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,QAAQ,YAAY;AAEpC,IAAMC,QAAQ,GAAGF,KAAK,CAACG,MAAM,CAAC;EAC1B;EACAC,OAAO,EAAE,4BAA4B;EACrCC,OAAO,EAAE;AACb,CAAC,CAAC;;AAEF;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACAL,KAAK,CAACM,YAAY,CAACC,QAAQ,CAACC,GAAG,CAC9B,UAAAD,QAAQ,EAAI;EACXE,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;EACtB,OAAOH,QAAQ;AAChB,CAAC,EACD,UAAAI,KAAK,EAAI;EACRF,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;EACtBD,OAAO,CAACC,GAAG,CAACC,KAAK,CAAC;EAClB,IAAGA,KAAK,CAACC,OAAO,EAAC;IAChBH,OAAO,CAACC,GAAG,CAACC,KAAK,CAACC,OAAO,CAAC;EAC3B,CAAC,MAAM,IAAGD,KAAK,CAACJ,QAAQ,EAAC;IACxBE,OAAO,CAACC,GAAG,CAACC,KAAK,CAACJ,QAAQ,CAACM,IAAI,CAAC;IAChCJ,OAAO,CAACC,GAAG,CAACC,KAAK,CAACJ,QAAQ,CAACO,MAAM,CAAC;EACnC;EACA,IAAIH,KAAK,IAAIA,KAAK,CAACJ,QAAQ,EAAE;IAC5B,QAAQI,KAAK,CAACJ,QAAQ,CAACO,MAAM;MAC5B,KAAK,GAAG;QAAEH,KAAK,CAACI,OAAO,GAAG,WAAW;QACpC;MACD,KAAK,GAAG;QAAEJ,KAAK,CAACI,OAAO,GAAG,gBAAgB;QACzC;MACD,KAAK,GAAG;QAAEJ,KAAK,CAACI,OAAO,GAAG,WAAW;QACpC;MACD,KAAK,GAAG;QAAEJ,KAAK,CAACI,OAAO,GAAG,WAAW;QACpC;MACD,KAAK,GAAG;QAAEJ,KAAK,CAACI,OAAO,GAAG,WAAW;QACpC;MACD,KAAK,GAAG;QAAEJ,KAAK,CAACI,OAAO,GAAG,YAAY;QACrC;MACD,KAAK,GAAG;QAAEJ,KAAK,CAACI,OAAO,GAAG,YAAY;QACrC;MACD,KAAK,GAAG;QAAEJ,KAAK,CAACI,OAAO,GAAG,WAAW;QACpC;MACD,KAAK,GAAG;QAAEJ,KAAK,CAACI,OAAO,GAAG,YAAY;QACrC;MACD,KAAK,GAAG;QAAEJ,KAAK,CAACI,OAAO,GAAG,WAAW;QACpC;MACD,KAAK,GAAG;QAAEJ,KAAK,CAACI,OAAO,GAAG,iBAAiB;QAC1C;MACD;QAASJ,KAAK,CAACI,OAAO,GAAG,MAAM;IAAC;EAElC,CAAC,MAAI;IACJJ,KAAK,CAACI,OAAO,GAAE,UAAU;EAC1B;EACA,OAAOC,OAAO,CAACC,MAAM,CAACN,KAAK,CAAC;AAC7B,CAAC,CACD;AAED,eAAeT,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}